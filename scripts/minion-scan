#!/usr/bin/env python

import json
import sys
import time
import logging

import requests

MINION_BACKEND = "http://127.0.0.1:8383"

report_path = "/tmp/artifacts/scheduled.log"

# create logger
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.FileHandler(report_path)
ch.setLevel(logging.DEBUG)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# add formatter to ch
ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

# 'application' code
# logger.debug('debug message')
# logger.info('info message')
# logger.warn('warn message')
# logger.error('error message')
# logger.critical('critical message')


if __name__ == "__main__":

    if len(sys.argv) != 4:
        print "usage: minion-scan <user> <plan> <target>"
        logger.error("Wrong call for script, expected 4 arguments, got %s" % len(sys.argv))
        sys.exit(1)

    user = sys.argv[1]
    plan = sys.argv[2]
    target = sys.argv[3]

    msg = "Talking to minion-backend on %s to start plan %s against target %s" % (MINION_BACKEND, plan, target)
    logger.info(msg)

    # Create a scan
    r = requests.post(MINION_BACKEND + "/scans",
                      headers={'Content-Type': 'application/json'},
                      data=json.dumps({
                          'plan': plan,
                          'configuration': {'target': target},
                          'user': user}))
    r.raise_for_status()
    scan = r.json()['scan']

    # Start the scan
    r = requests.put(MINION_BACKEND + "/scans/" + scan['id'] + "/control",
                     headers={'Content-Type': 'application/json'},
                     data="START")
    r.raise_for_status()

    # Wait until the scan has finished

    while True:
        # Get state of the scan
        r = requests.get(MINION_BACKEND + "/scans/" + scan['id'])
        r.raise_for_status()
        scan = r.json()['scan']

        msg = "Scan state for %s on %s is: %s" % (plan, target, scan['state'])
        logger.info(msg)

        if scan['state'] in ('FINISHED', 'TERMINATED', 'FAILED', 'ABORTED', 'STOPPED'):
            msg = "Scan for %s on %s exited with state: %s" % (plan, target, scan['state'])
            logger.info(msg)
            break

        time.sleep(2)
